create table Client (
                        id_client serial primary key,
                        first_name varchar(255) NOT NULL,
                        last_name varchar(255) NOT NULL,
                        phone varchar(12) NOT NULL,
                        email varchar(255),
                        password varchar(255) NOT NULL,
                        balance numeric(8, 2) NOT NULL default '0.0',
                        role varchar(255) NOT NULL,
                        UNIQUE(phone, email)
);


create table Orders (
                        id_order serial NOT NULL,
                        id_client integer references Client(id_client),
                        date_order timestamp(0) DEFAULT NULL,
                        date_cancel timestamp(0) DEFAULT NULL,
                        price numeric(8, 2) default '0.0',
                        status varchar(255) NOT NULL,
                        CONSTRAINT PK_ORDER_ID primary key (id_order)
);

create table Tariff (
                        id_tariff serial NOT NULL,
                        name_tariff varchar(255) NOT NULL,
                        type varchar(255) NOT NULL,
                        price numeric(8, 2) NOT NULL,
                        CONSTRAINT PK_TARIFF_ID primary key (id_tariff),
                        UNIQUE(name_tariff)
);

create table Product (
                         id_product serial primary key,
                         id_order integer NOT NULL,
                         id_tariff integer NOT NULL,
                         sms integer default 0,
                         gb integer default 0,
                         minute integer default 0,
                         speed integer default 0,
                         price numeric(8,2),
                         CONSTRAINT FK_ORDER_ID foreign key (id_order) REFERENCES Orders (id_order),
                         CONSTRAINT FK_TARIFF_ID foreign key (id_tariff) REFERENCES Tariff (id_tariff)
);

create table Bill (
                      id_bill serial primary key,
                      id_client integer references Client(id_client),
                      date_bill date NOT NULL,
                      discount integer default 0,
                      subtotal numeric(8,2) NOT NULL,
                      total numeric(8, 2) NOT NULL
);

INSERT into client values
(1, 'Courteney', 'Cox', '89106845169', 'CourteneyCox@gmail.com', '2fg56gsg', 578.47, 'USER'),
(2, 'Matthew', 'Perry', '89425684113', 'MPerry@ya.ru', 'asdf1234', 890.23, 'USER');

insert into tariff values
(1, 'Super', 'Mobile connection and Internet', 0.89),
(2, 'FIT Internet', 'Internet', 0.26),
(3, 'Smart', 'Phone', 0.21);

INSERT into orders values
(1, 1, null, null, 0.0,'Saved'),
(2, 1, '2019-10-16 10:21:11', null, 0.0,'Sent');

insert into Product values
(1, 1, 1, 200, 10, 500, 60, 185.60),
(2, 1, 2, 0, 30, 0, 100, 265.00),
(3, 2, 1, 200, 10, 500, 60, 185.60);

insert into bill values
(1, 1, '2019-10-27', 5, 245.25);


create or replace function getProductPrice(_id_product integer)
    returns numeric(8,2) as
    $BODY$
    declare
        price numeric(8,2);
        begin
            select ((p.minute + p.sms + p.gb + p.speed) * t.price) into strict price
            from product p inner join tariff t on p.id_tariff = t.id_tariff
            where p.id_product = _id_product;
            return price;
        end;
    $BODY$
    language plpgsql volatile;




create or replace function getOrdersTotal(_id_client integer)
    returns numeric(8,2) as
    $BODY$
        declare
            total numeric(8,2);
            priceOrder numeric(8,2);
            curProduct record;
            curOrder record;
            dateB date;
            dateDif integer;
        begin
            total = 0;
            priceOrder = 0;
            for curOrder in select id_order, date_order, date_cancel, status from orders where id_client = _id_client
                loop
                    if curOrder.status = 'Sent' or curOrder.status = 'Canceled' then
                        if curOrder.date_order notnull then
                            if extract(day from current_date) <= 27 then
                                dateB = make_date(extract(year from current_date)::integer, extract(month from current_date)::int, 27);
                            else
                                dateB = make_date(extract(year from current_date)::integer, extract(month from current_date)::int, 27) + interval '1 month';
                            end if;
                            if curOrder.date_cancel isnull or (curOrder.date_cancel < dateB and curOrder.date_cancel > dateB - interval '1 month') then
                                for curProduct in select id_order, price from product where id_order = curOrder.id_order
                                    loop
                                        priceOrder = curProduct.price + priceOrder;
                                    end loop;
                                dateDif = dateB - curOrder.date_order::date;
                                if dateDif < 30 then
                                    total = total + dateDif * (priceOrder / 30);
                                else
                                    total = total + priceOrder;
                                end if;
                                priceOrder = 0;
                            end if;
                        end if;
                    end if;
                end loop;
            return total;
        end;
    $BODY$
    language plpgsql volatile;


create or replace function generateBill(_id_client_ integer)
    returns table(_id_bill integer, _id_client integer, _date_bill date, _discount integer, _subtotal numeric(8,2), _total numeric(8,2)) as
    $BODY$
    declare
        rec record;
        newDate date;
        newTotal numeric(8,2);
    begin
        select id_bill, date_bill, discount from bill where id_client = _id_client_ order by id_bill desc limit 1 into rec;
        newTotal = getOrdersTotal(_id_client_);
        if newTotal != 0 then
            if rec.date_bill notnull and current_date <= rec.date_bill then
                update bill set subtotal = newTotal - (newTotal * rec.discount / 100), total = newTotal where id_bill = rec.id_bill;
            else
                if rec.date_bill isnull then
                    if extract(day from current_date) <= 27 then
                        newDate = make_date(extract(year from current_date)::int, extract(month from current_date)::int, 27);
                    else
                        newDate = make_date(extract(year from current_date)::int, extract(month from current_date)::int, 27) + interval '1 month';
                    end if;
                else
                    newDate = rec.date_bill + interval '1 month';
                end if;
                insert into bill(id_client, date_bill, subtotal, total) values (_id_client_, newDate::date, newTotal, newTotal);
            end if;
        end if;
        return query select * from bill where id_client = _id_client_ order by date_bill;
    end;
    $BODY$
language plpgsql volatile;
